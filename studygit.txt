一、创建版本库
		初始化一个Git仓库，使用git init命令。
		添加文件到Git仓库，分两步：
			第一步，使用命令git add file1，file2……（注意，可反复多次使用，添加多个文件）
			第二步，使用命令git commit -m "注释" 

二、基础操作

		要随时掌握工作区的状态，使用git status命令。
		如果git status告诉你有文件被修改过，用git diff可以查看修改内容

		1.版本控制
				用git log可以查看提交历史，以便确定要回退到哪个版本。
				用git reflog查看命令历史，以便确定要回到未来的哪个版本。
				git log --pretty=oneline 只看一行提交历史
				git reset --hard HEAD^ 回退到上一个版本
				git reset --hard “commit id”回退到某个提交版本
			
		2.工作区和暂存区
				git add是把文件从工作区提交到了暂存区；执行git commit时，将暂存区的文件提交到库里面

		3.管理修改
				用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
				每次修改后，如果不进行add，工作区不提交到暂存区，git status是不会显示的。

		4.撤销修改：
				git checkout -- file可以丢弃工作区的修改
				如果已经提交到暂存区，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
				场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
				场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
				场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。


		5.删除文件：
				git rm用于删除一个文件。
				如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。


三、远程仓库
		本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，需要一点设置：
		第1步：创建SSH Key。$ ssh-keygen -t rsa -C "youremail@example.com"
		用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
		第2步：登陆GitHub，添加id_rsa.pub到ssh keys里面；

		1.添加远程库：
				登录GitHub，创建一个新的仓库；
				要关联一个远程库，使用命令git remote add origin git@github.com:houwenqi/studygit.git；
				关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
				使用命令git push origin master推送最新修改,将本地修改同步到GitHub；

		2.从远程库克隆：
				使用git clone命令克隆，git clone git@github.com:houwenqi/studygit.git
				Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。


四、分支管理

		1.创建与合并分支：
				查看分支：git branch
				创建分支：git branch <name>
				切换分支：git checkout <name>
				创建+切换分支：git checkout -b <name>
				合并某分支到当前分支：git merge <name>
				删除分支：git branch -d <name>

		2.解决冲突：
				当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成
				比如：主分支与分支同时修改一个文件readme.txt，后面要手动合并里面的内容重新提交才能合并成功。
				git log --graph --pretty=oneline --abbrev-commit查看分支合并图

		3.分支管理策略：
				如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息
				合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
				git merge --no-ff -m "merge with no-ff" dev，合并dev分支，请注意--no-ff参数，表示禁用Fast forward
				主策略就是，master不动，用来控制版本，平时在dev上开发，每个人建各自分支提交到dev,最后统一到master

		4.BUG分支：
				每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除
				当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场
				stash功能，可以把当前工作现场“储藏”起来
				
				git stash list命令看看刚才的工作现场存到哪去了
				git stash apply恢复，但是stash内容并不删除，要用git stash drop来删除；
				git stash pop，恢复的同时把stash内容也删了

		5.Feature分支
				开发一个新feature，最好新建一个分支；
				如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

		6.多人合作：
				查看远程库信息，使用git remote -v；
				本地新建的分支如果不推送到远程，对其他人就是不可见的；
				从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
				在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
				建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
				从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。


五、标签管理

		1.创建标签:
				git tag <name> <commit id>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
				git tag -a <tagname> -m "blablabla..."可以指定标签信息；
				git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
				git tag可以查看所有标签。
				git show <tagname>查看标签信息

		2.操作标签：
				git push origin <tagname>可以推送一个本地标签；
				git push origin --tags可以推送全部未推送过的本地标签；
				git tag -d <tagname>可以删除一个本地标签；
				git push origin :refs/tags/<tagname>可以删除一个远程标签。


六、使用GitHub

		在GitHub上，可以任意Fork开源仓库；
		自己拥有Fork后的仓库的读写权限；
		可以推送pull request给官方仓库来贡献代码。


七、自定义Git
		git config --global color.ui true让Git显示颜色，会让命令输出看起来更醒目

		1.忽略特殊文件:
				所有配置文件可以直接在线浏览：https://github.com/github/gitignore
				忽略文件的原则是：
				忽略操作系统自动生成的文件，比如缩略图等；
				忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
				忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件

		2.配置别名:
				命令：git config --global alias.st status
				st就表示status，co表示checkout，ci表示commit，br表示branch
				git config --global alias.unstage 'reset HEAD'把暂存区的修改撤销掉（unstage），重新放回工作区
				git config --global alias.last 'log -1' 用git last就能显示最近一次的提交
				git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

				配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
				每个仓库的Git配置文件都放在.git/config文件中
				别名就在[alias]后面，要删除别名，直接把对应的行删掉即可

八、搭建Git服务器
		1. 安装git:
		　　一般服务器都自带git。如果嫌版本低，可以选择卸载重装。我觉得自带的就够了。
				git -version

		2. 创建用户git:
				groupadd git
				adduser git -g git
				
		3. 创建authorized_keys文件:
				cd /home/git
				mkdir .ssh
				chmod 700 .ssh
				touch .ssh/authorized_keys
				chmod 600 .ssh/authorized_keys
				cd /home
				chown -R git:git git
				要注意的是文件权限和所属用户。
				(后续的git clone如果需要密码，很有可能是git用户没有访问authorized_keys文件的权限)

		4. 客户端创建密钥并上传:
				要在客户端运行如下命令。ssh-keygen -t rsa -C "your_email"
				该命令会产生两个文件: id_rsa对应私钥，id_rsa.pub对应公钥。
				将id_rsa.pub中的内容写到服务器的authorized_keys文件中。
				如果有多个客户端，那么在authorized_keys文件中，一行保存一个客户端的公钥。

		5. 创建git仓库

				为了方便管理，所有的git仓库都置于同一目录下，假设为/home/gitrepo，
				cd /home
				mkdir gitrepo
				chown git:git gitrepo
				接下来，创建我们的第一个git仓库：sample.git，
				cd gitrepo
				git init --bare sample.git
				最后一步，把仓库所属用户改为git。
				chown -R git:git sample.git
				
				到此，git服务器搭建完毕。


		clone仓库
			git clone git@your_gitServer_ip:/home/gitrepo/sample.git
			如：
			git clone git@172.16.1.22:/home/gitrepo/sample.git
			 
		push已有仓库
			// 以master分支示范
			git checkout master
			git remote rm origin
			git remote add origin git@your_gitServer_ip:/home/gitrepo/sample.git
			git push -u origin master
			
			
上传本地文件夹到github：
		总结：其实只需要进行下面几步就能把本地项目上传到Github
     1、在本地创建一个版本库（即文件夹），通过git init把它变成Git仓库；
     2、把项目复制到这个文件夹里面，再通过git add .把项目添加到仓库；
     3、再通过git commit -m "注释内容"把项目提交到仓库；
     4、在Github上设置好SSH密钥后，新建一个远程仓库，通过git remote add origin https://github.com/guyibang/TEST2.git将本地仓库和远程仓库进行关联；
     5、最后通过git push -u origin master把本地仓库的项目推送到远程仓库（也就是Github）上；
     （若新建远程仓库的时候自动创建了README文件会报错，git pull --rebase origin master先将内容合并以下）。